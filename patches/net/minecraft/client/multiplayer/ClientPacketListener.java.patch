--- a/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -334,6 +334,7 @@
    private MessageSignatureCache messageSignatureCache = MessageSignatureCache.createDefault();
    private final ChunkBatchSizeCalculator chunkBatchSizeCalculator = new ChunkBatchSizeCalculator();
    private final PingDebugMonitor pingDebugMonitor;
+   private final boolean isModdedConnection;
    private boolean seenInsecureChatWarning = false;
    private volatile boolean closed;
 
@@ -345,6 +346,7 @@
       this.advancements = new ClientAdvancements(p_253924_, this.telemetryManager);
       this.suggestionsProvider = new ClientSuggestionProvider(this, p_253924_);
       this.pingDebugMonitor = new PingDebugMonitor(this, p_253924_.getDebugOverlay().getPingLogger());
+      this.isModdedConnection = p_295121_.isModdedConnection();
    }
 
    public ClientSuggestionProvider getSuggestionsProvider() {
@@ -403,6 +405,7 @@
 
       this.minecraft.debugRenderer.clear();
       this.minecraft.player.resetPos();
+      net.neoforged.neoforge.client.ClientHooks.firePlayerLogin(this.minecraft.gameMode, this.minecraft.player, this.minecraft.getConnection().connection);
       this.minecraft.player.setId(p_105030_.playerId());
       this.level.addEntity(this.minecraft.player);
       this.minecraft.player.input = new KeyboardInput(this.minecraft.options);
@@ -764,6 +767,7 @@
                   this.telemetryManager,
                   this.registryAccess,
                   this.enabledFeatures,
+                  this.isModdedConnection,
                   this.serverBrand,
                   this.serverData,
                   this.postDisconnectScreen
@@ -1110,7 +1114,9 @@
          localplayer1.getAttributes().assignValues(localplayer.getAttributes());
       }
 
+      localplayer1.updateSyncFields(localplayer); // Forge: fix MC-10657
       localplayer1.resetPos();
+      net.neoforged.neoforge.client.ClientHooks.firePlayerRespawn(this.minecraft.gameMode, localplayer, localplayer1, localplayer1.connection.connection);
       this.level.addEntity(localplayer1);
       localplayer1.setYRot(-180.0F);
       localplayer1.input = new KeyboardInput(this.minecraft.options);
@@ -1230,10 +1236,7 @@
       PacketUtils.ensureRunningOnSameThread(p_104976_, this, this.minecraft);
       BlockPos blockpos = p_104976_.getPos();
       this.minecraft.level.getBlockEntity(blockpos, p_104976_.getType()).ifPresent(p_205557_ -> {
-         CompoundTag compoundtag = p_104976_.getTag();
-         if (compoundtag != null) {
-            p_205557_.load(compoundtag);
-         }
+         p_205557_.onDataPacket(connection, p_104976_);
 
          if (p_205557_ instanceof CommandBlockEntity && this.minecraft.screen instanceof CommandBlockEditScreen) {
             ((CommandBlockEditScreen)this.minecraft.screen).updateGui();
@@ -1395,7 +1398,9 @@
    @Override
    public void handleCommands(ClientboundCommandsPacket p_104990_) {
       PacketUtils.ensureRunningOnSameThread(p_104990_, this, this.minecraft);
-      this.commands = new CommandDispatcher<>(p_104990_.getRoot(CommandBuildContext.simple(this.registryAccess, this.enabledFeatures)));
+      var context = CommandBuildContext.simple(this.registryAccess, this.enabledFeatures);
+      this.commands = new CommandDispatcher<>(p_104990_.getRoot(context));
+      this.commands = net.neoforged.neoforge.client.ClientCommandHandler.mergeServerCommands(this.commands, context);
    }
 
    @Override
@@ -1417,6 +1422,7 @@
       ClientRecipeBook clientrecipebook = this.minecraft.player.getRecipeBook();
       clientrecipebook.setupCollections(this.recipeManager.getRecipes(), this.minecraft.level.registryAccess());
       this.minecraft.populateSearchTree(SearchRegistry.RECIPE_COLLECTIONS, clientrecipebook.getCollections());
+      net.neoforged.neoforge.client.ClientHooks.onRecipesUpdated(this.recipeManager);
    }
 
    @Override
@@ -1523,7 +1529,8 @@
          Blocks.rebuildCache();
       }
 
-      CreativeModeTabs.searchTab().rebuildSearchTree();
+      CreativeModeTabs.allTabs().stream().filter(net.minecraft.world.item.CreativeModeTab::hasSearchBar).forEach(net.minecraft.world.item.CreativeModeTab::rebuildSearchTree);
+      net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.TagsUpdatedEvent(this.registryAccess, true, connection.isMemoryConnection()));
    }
 
    @Override
@@ -1855,7 +1862,7 @@
    }
 
    @Override
-   public void handleCustomPayload(CustomPacketPayload p_295851_) {
+   public void handleCustomPayload(net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket p_295727_, CustomPacketPayload p_295851_) {
       if (p_295851_ instanceof PathfindingDebugPayload pathfindingdebugpayload) {
          this.minecraft
             .debugRenderer
@@ -1922,10 +1929,16 @@
             .gameEventListenerRenderer
             .trackListener(gameeventlistenerdebugpayload.listenerPos(), gameeventlistenerdebugpayload.listenerRange());
       } else {
+         if (this.isModdedConnection) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onModdedPacketAtClient(
+                    this, p_295727_
+            );
+            return;
+         }
          this.handleUnknownCustomPayload(p_295851_);
       }
    }
-
+   
    private void handleUnknownCustomPayload(CustomPacketPayload p_294389_) {
       LOGGER.warn("Unknown custom packet payload: {}", p_294389_.id());
    }
@@ -2302,6 +2315,8 @@
    }
 
    public void sendChat(String p_249888_) {
+      p_249888_ = net.neoforged.neoforge.client.ClientHooks.onClientSendMessage(p_249888_);
+      if (p_249888_.isEmpty()) return;
       Instant instant = Instant.now();
       long i = Crypt.SaltSupplier.getLong();
       LastSeenMessagesTracker.Update lastseenmessagestracker$update = this.lastSeenMessages.generateAndApplyUpdate();
@@ -2311,6 +2326,7 @@
    }
 
    public void sendCommand(String p_250092_) {
+      if (net.neoforged.neoforge.client.ClientCommandHandler.runCommand(p_250092_)) return;
       Instant instant = Instant.now();
       long i = Crypt.SaltSupplier.getLong();
       LastSeenMessagesTracker.Update lastseenmessagestracker$update = this.lastSeenMessages.generateAndApplyUpdate();
