--- a/net/minecraft/client/multiplayer/ClientCommonPacketListenerImpl.java
+++ b/net/minecraft/client/multiplayer/ClientCommonPacketListenerImpl.java
@@ -96,17 +_,17 @@
     public void handleCustomPayload(ClientboundCustomPayloadPacket p_295727_) {
         CustomPacketPayload custompacketpayload = p_295727_.payload();
         if (!(custompacketpayload instanceof DiscardedPayload)) {
-            PacketUtils.ensureRunningOnSameThread(p_295727_, this, this.minecraft);
             if (custompacketpayload instanceof BrandPayload brandpayload) {
+                PacketUtils.ensureRunningOnSameThread(p_295727_, this, this.minecraft); //Neo: We move this here to ensure that only vanilla packets are handled on the main thread.
                 this.serverBrand = brandpayload.brand();
                 this.telemetryManager.onServerBrandReceived(brandpayload.brand());
             } else {
-                this.handleCustomPayload(custompacketpayload);
+                this.handleCustomPayload(p_295727_, custompacketpayload);
             }
         }
     }
 
-    protected abstract void handleCustomPayload(CustomPacketPayload p_295776_);
+    protected abstract void handleCustomPayload(ClientboundCustomPayloadPacket p_295727_, CustomPacketPayload p_295776_);
 
     protected abstract RegistryAccess.Frozen registryAccess();
 
@@ -189,9 +_,17 @@
     }
 
     public void send(Packet<?> p_295097_) {
+        if (!net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().canSendPacket(p_295097_, this)) {
+            return;
+        }
+        
         this.connection.send(p_295097_);
     }
 
+    public void send(CustomPacketPayload payload) {
+        this.send(new net.minecraft.network.protocol.common.ServerboundCustomPayloadPacket(payload));
+    }
+
     @Override
     public void onDisconnect(Component p_295485_) {
         this.telemetryManager.onDisconnect();
@@ -315,5 +_,25 @@
         @OnlyIn(Dist.CLIENT)
         static record PendingRequest(UUID id, URL url, String hash) {
         }
+    }
+    
+    @Override
+    public Connection getConnection() {
+        return connection;
+    }
+    
+    @Override
+    public net.minecraft.util.thread.ReentrantBlockableEventLoop<?> getMainThreadEventLoop() {
+        return minecraft;
+    }
+    
+    @Override
+    public boolean isVanillaConnection() {
+        return net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().isVanillaConnection(getConnection());
+    }
+    
+    @Override
+    public boolean isConnected(net.minecraft.resources.ResourceLocation payloadId) {
+        return net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().isConnected(this, payloadId);
     }
 }
