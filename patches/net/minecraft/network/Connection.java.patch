--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -110,6 +110,7 @@
       if (this.delayedDisconnect != null) {
          this.disconnect(this.delayedDisconnect);
       }
+      net.neoforged.neoforge.network.connection.ConnectionUtils.setConnection(p_129525_, this);
    }
 
    public static void setInitialProtocolAttributes(Channel p_294962_) {
@@ -120,6 +121,7 @@
    @Override
    public void channelInactive(ChannelHandlerContext p_129527_) {
       this.disconnect(Component.translatable("disconnect.endOfStream"));
+      net.neoforged.neoforge.network.connection.ConnectionUtils.removeConnection(p_129527_);
    }
 
    @Override
@@ -371,7 +373,7 @@
       if (this.address == null) {
          return "local";
       } else {
-         return p_295875_ ? this.address.toString() : "IP hidden";
+         return p_295875_ ? net.neoforged.neoforge.network.DualStackUtils.getAddressString(this.address) : "IP hidden";
       }
    }
 
@@ -410,6 +412,7 @@
    }
 
    public static ChannelFuture connect(InetSocketAddress p_290034_, boolean p_290035_, final Connection p_290031_) {
+      net.neoforged.neoforge.network.DualStackUtils.checkIPv6(p_290034_.getAddress());
       Class<? extends SocketChannel> oclass;
       EventLoopGroup eventloopgroup;
       if (Epoll.isAvailable() && p_290035_) {
@@ -466,6 +469,7 @@
 
    public static Connection connectToLocalServer(SocketAddress p_129494_) {
       final Connection connection = new Connection(PacketFlow.CLIENTBOUND);
+      connection.activationHandler = net.neoforged.neoforge.network.NetworkHooks::registerClientLoginChannel;
       new Bootstrap().group(LOCAL_WORKER_GROUP.get()).handler(new ChannelInitializer<Channel>() {
          @Override
          protected void initChannel(Channel p_129557_) {
@@ -558,6 +562,14 @@
 
    public float getAverageSentPackets() {
       return this.averageSentPackets;
+   }
+
+   public Channel channel() {
+      return this.channel;
+   }
+
+   public PacketFlow getDirection() {
+      return this.receiving;
    }
 
    public void setBandwidthLogger(SampleLogger p_299187_) {
