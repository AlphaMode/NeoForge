--- a/net/minecraft/network/ConnectionProtocol.java
+++ b/net/minecraft/network/ConnectionProtocol.java
@@ -3,6 +3,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.logging.LogUtils;
+import io.netty.channel.ChannelHandlerContext;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
@@ -12,6 +13,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.function.BiFunction;
 import java.util.function.Function;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
@@ -238,7 +240,7 @@
                .addPacket(ClientboundContainerSetSlotPacket.class, ClientboundContainerSetSlotPacket::new)
                .addPacket(ClientboundCooldownPacket.class, ClientboundCooldownPacket::new)
                .addPacket(ClientboundCustomChatCompletionsPacket.class, ClientboundCustomChatCompletionsPacket::new)
-               .addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new)
+               .addContextualPacket(ClientboundCustomPayloadPacket.class, (buf, context) -> new ClientboundCustomPayloadPacket(buf, context, ConnectionProtocol.play()))
                .addPacket(ClientboundDamageEventPacket.class, ClientboundDamageEventPacket::new)
                .addPacket(ClientboundDeleteChatPacket.class, ClientboundDeleteChatPacket::new)
                .addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new)
@@ -346,7 +348,7 @@
                .addPacket(ServerboundContainerButtonClickPacket.class, ServerboundContainerButtonClickPacket::new)
                .addPacket(ServerboundContainerClickPacket.class, ServerboundContainerClickPacket::new)
                .addPacket(ServerboundContainerClosePacket.class, ServerboundContainerClosePacket::new)
-               .addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new)
+               .addContextualPacket(ServerboundCustomPayloadPacket.class, (buf, context) -> new ServerboundCustomPayloadPacket(buf, context, ConnectionProtocol.play()))
                .addPacket(ServerboundEditBookPacket.class, ServerboundEditBookPacket::new)
                .addPacket(ServerboundEntityTagQuery.class, ServerboundEntityTagQuery::new)
                .addPacket(ServerboundInteractPacket.class, ServerboundInteractPacket::new)
@@ -430,7 +432,7 @@
          .addFlow(
             PacketFlow.CLIENTBOUND,
             new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ClientConfigurationPacketListener>()
-               .addPacket(ClientboundCustomPayloadPacket.class, ClientboundCustomPayloadPacket::new)
+               .addContextualPacket(ClientboundCustomPayloadPacket.class, (buf, context) -> new ClientboundCustomPayloadPacket(buf, context, ConnectionProtocol.configuration()))
                .addPacket(ClientboundDisconnectPacket.class, ClientboundDisconnectPacket::new)
                .addPacket(ClientboundFinishConfigurationPacket.class, ClientboundFinishConfigurationPacket::new)
                .addPacket(ClientboundKeepAlivePacket.class, ClientboundKeepAlivePacket::new)
@@ -444,7 +446,7 @@
             PacketFlow.SERVERBOUND,
             new ConnectionProtocol.PacketSet<net.minecraft.network.protocol.configuration.ServerConfigurationPacketListener>()
                .addPacket(ServerboundClientInformationPacket.class, ServerboundClientInformationPacket::new)
-               .addPacket(ServerboundCustomPayloadPacket.class, ServerboundCustomPayloadPacket::new)
+               .addContextualPacket(ServerboundCustomPayloadPacket.class, (buf, context) -> new ServerboundCustomPayloadPacket(buf, context, ConnectionProtocol.play()))
                .addPacket(ServerboundFinishConfigurationPacket.class, ServerboundFinishConfigurationPacket::new)
                .addPacket(ServerboundKeepAlivePacket.class, ServerboundKeepAlivePacket::new)
                .addPacket(ServerboundPongPacket.class, ServerboundPongPacket::new)
@@ -456,6 +458,22 @@
    private final String id;
    private final Map<PacketFlow, ConnectionProtocol.CodecData<?>> flows;
 
+   private static ConnectionProtocol play() {
+        return PLAY;
+   }
+   
+   private static ConnectionProtocol configuration() {
+      return CONFIGURATION;
+   }
+   
+   public boolean isPlay() {
+      return this == PLAY;
+   }
+   
+   public boolean isConfiguration() {
+      return this == CONFIGURATION;
+   }
+   
    private static ConnectionProtocol.ProtocolBuilder protocol() {
       return new ConnectionProtocol.ProtocolBuilder();
    }
@@ -514,8 +532,8 @@
       }
 
       @Nullable
-      public Packet<?> createPacket(int p_294972_, FriendlyByteBuf p_296217_) {
-         return this.packetSet.createPacket(p_294972_, p_296217_);
+      public Packet<?> createPacket(int p_294972_, FriendlyByteBuf p_296217_, ChannelHandlerContext p_130535_) {
+         return this.packetSet.createPacket(p_294972_, p_296217_, p_130535_);
       }
 
       public boolean isValidPacketType(Packet<?> p_294142_) {
@@ -528,19 +546,28 @@
       final Object2IntMap<Class<? extends Packet<? super T>>> classToId = Util.make(
          new Object2IntOpenHashMap<>(), p_129613_ -> p_129613_.defaultReturnValue(-1)
       );
+      /**
+       * @deprecated Use {@link #contextualIdToDeserializer} instead it allows for context to be passed to the deserializer
+       */
+      @Deprecated
       private final List<Function<FriendlyByteBuf, ? extends Packet<? super T>>> idToDeserializer = Lists.newArrayList();
+      private final List<BiFunction<FriendlyByteBuf, ChannelHandlerContext, ? extends Packet<? super T>>> contextualIdToDeserializer = Lists.newArrayList();
       private BundlerInfo bundlerInfo = BundlerInfo.EMPTY;
       private final Set<Class<? extends Packet<T>>> extraClasses = new HashSet<>();
-
+      
       public <P extends Packet<? super T>> ConnectionProtocol.PacketSet<T> addPacket(Class<P> p_178331_, Function<FriendlyByteBuf, P> p_178332_) {
-         int i = this.idToDeserializer.size();
-         int j = this.classToId.put(p_178331_, i);
+         return addContextualPacket(p_178331_, (buf, channelHandlerContext) -> p_178332_.apply(buf));
+      }
+      
+      public <P extends Packet<? super T>> ConnectionProtocol.PacketSet<T> addContextualPacket(Class<P> packetClass, BiFunction<FriendlyByteBuf, ChannelHandlerContext, P> readerBuilder) {
+         int i = this.contextualIdToDeserializer.size();
+         int j = this.classToId.put(packetClass, i);
          if (j != -1) {
-            String s = "Packet " + p_178331_ + " is already registered to ID " + j;
+            String s = "Packet " + packetClass + " is already registered to ID " + j;
             LOGGER.error(LogUtils.FATAL_MARKER, s);
             throw new IllegalArgumentException(s);
          } else {
-            this.idToDeserializer.add(p_178332_);
+            this.contextualIdToDeserializer.add(readerBuilder);
             return this;
          }
       }
@@ -566,9 +593,9 @@
       }
 
       @Nullable
-      public Packet<?> createPacket(int p_178328_, FriendlyByteBuf p_178329_) {
-         Function<FriendlyByteBuf, ? extends Packet<? super T>> function = this.idToDeserializer.get(p_178328_);
-         return function != null ? function.apply(p_178329_) : null;
+      public Packet<?> createPacket(int p_178328_, FriendlyByteBuf p_178329_, ChannelHandlerContext p_130535_) {
+         BiFunction<FriendlyByteBuf, ChannelHandlerContext, ? extends Packet<? super T>> function = this.contextualIdToDeserializer.get(p_178328_);
+         return function != null ? function.apply(p_178329_, p_130535_) : null;
       }
 
       public BundlerInfo bundlerInfo() {
