--- a/net/minecraft/network/protocol/common/ServerboundCustomPayloadPacket.java
+++ b/net/minecraft/network/protocol/common/ServerboundCustomPayloadPacket.java
@@ -2,6 +_,9 @@
 
 import com.google.common.collect.ImmutableMap;
 import java.util.Map;
+
+import io.netty.channel.ChannelHandlerContext;
+import net.minecraft.network.ConnectionProtocol;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.common.custom.BrandPayload;
@@ -11,21 +_,60 @@
 
 public record ServerboundCustomPayloadPacket(CustomPacketPayload payload) implements Packet<ServerCommonPacketListener> {
     private static final int MAX_PAYLOAD_SIZE = 32767;
-    private static final Map<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>> KNOWN_TYPES = ImmutableMap.<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>>builder(
+    public static final Map<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>> KNOWN_TYPES = ImmutableMap.<ResourceLocation, FriendlyByteBuf.Reader<? extends CustomPacketPayload>>builder(
             
         )
         .put(BrandPayload.ID, BrandPayload::new)
         .build();
-
+    
+    /**
+     * Creates a new packet with a custom payload from the network.
+     * @param p_296108_ The buffer to read the packet from.
+     * @deprecated Use {@link #ServerboundCustomPayloadPacket(FriendlyByteBuf, ChannelHandlerContext, ConnectionProtocol)} instead, this variant can only read vanilla payloads.
+     */
+    @Deprecated
     public ServerboundCustomPayloadPacket(FriendlyByteBuf p_296108_) {
         this(readPayload(p_296108_.readResourceLocation(), p_296108_));
     }
-
+    
+    /**
+     * Creates a new packet with a custom payload from the network.
+     *
+     * @param p_296108_ The buffer to read the packet from.
+     * @param context The context of the channel handler
+     * @param protocol The protocol of the connection
+     */
+    public ServerboundCustomPayloadPacket(FriendlyByteBuf p_296108_, ChannelHandlerContext context, ConnectionProtocol protocol) {
+        this(readPayload(p_296108_.readResourceLocation(), p_296108_, context, protocol));
+    }
+    
+    /**
+     * Reads the payload from the given buffer.
+     *
+     * @param p_294367_ The id of the payload
+     * @param p_294321_ The buffer to read from
+     * @param context The context of the channel handler
+     * @param protocol The protocol of the connection
+     * @return The payload
+     */
+    private static CustomPacketPayload readPayload(ResourceLocation p_294367_, FriendlyByteBuf p_294321_, ChannelHandlerContext context, ConnectionProtocol protocol) {
+        FriendlyByteBuf.Reader<? extends CustomPacketPayload> reader = net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().getReader(p_294367_, context, protocol, KNOWN_TYPES);
+        return (CustomPacketPayload)(reader != null ? reader.apply(p_294321_) : readUnknownPayload(p_294367_, p_294321_));
+    }
+    
+    /**
+     * Reads the payload from the given buffer.
+     * @param p_294367_ The id of the payload
+     * @param p_294321_ The buffer to read from
+     * @return The payload
+     * @deprecated Use {@link #readPayload(ResourceLocation, FriendlyByteBuf, ChannelHandlerContext, ConnectionProtocol)} instead, this variant can only read vanilla payloads.
+     */
+    @Deprecated
     private static CustomPacketPayload readPayload(ResourceLocation p_294367_, FriendlyByteBuf p_294321_) {
         FriendlyByteBuf.Reader<? extends CustomPacketPayload> reader = KNOWN_TYPES.get(p_294367_);
-        return (CustomPacketPayload)(reader != null ? reader.apply(p_294321_) : readUnknownPayload(p_294367_, p_294321_));
+        return reader != null ? reader.apply(p_294321_) : readUnknownPayload(p_294367_, p_294321_);
     }
-
+    
     private static DiscardedPayload readUnknownPayload(ResourceLocation p_294973_, FriendlyByteBuf p_296037_) {
         int i = p_296037_.readableBytes();
         if (i >= 0 && i <= 32767) {
