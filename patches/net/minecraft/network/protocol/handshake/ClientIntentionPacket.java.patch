--- a/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java
+++ b/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java
@@ -3,26 +_,33 @@
 import net.minecraft.network.ConnectionProtocol;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
-
-public record ClientIntentionPacket(int protocolVersion, String hostName, int port, ClientIntent intention) implements Packet<ServerHandshakePacketListener> {
+import net.neoforged.neoforge.internal.versions.neoforge.NeoForgeVersion;
+
+import java.util.Objects;
+
+public record ClientIntentionPacket(int protocolVersion, String hostName, int port, ClientIntent intention, String fmlVersion) implements Packet<ServerHandshakePacketListener> {
     private static final int MAX_HOST_LENGTH = 255;
 
+    public ClientIntentionPacket {
+        if (fmlVersion == null) {
+            fmlVersion = getFMLVersion(hostName);
+            hostName = hostName.split("\0")[0];
+        }
+    }
+
     @Deprecated
     public ClientIntentionPacket(int protocolVersion, String hostName, int port, ClientIntent intention) {
-        this.protocolVersion = protocolVersion;
-        this.hostName = hostName;
-        this.port = port;
-        this.intention = intention;
+        this(protocolVersion, hostName, port, intention, NeoForgeVersion.getSpec());
     }
 
     public ClientIntentionPacket(FriendlyByteBuf p_179801_) {
-        this(p_179801_.readVarInt(), p_179801_.readUtf(255), p_179801_.readUnsignedShort(), ClientIntent.byId(p_179801_.readVarInt()));
+        this(p_179801_.readVarInt(), p_179801_.readUtf(255), p_179801_.readUnsignedShort(), ClientIntent.byId(p_179801_.readVarInt()), null);
     }
 
     @Override
     public void write(FriendlyByteBuf p_134737_) {
         p_134737_.writeVarInt(this.protocolVersion);
-        p_134737_.writeUtf(this.hostName);
+        p_134737_.writeUtf(this.hostName + "\0" + this.fmlVersion);
         p_134737_.writeShort(this.port);
         p_134737_.writeVarInt(this.intention.id());
     }
@@ -34,5 +_,13 @@
     @Override
     public ConnectionProtocol nextProtocol() {
         return this.intention.protocol();
+    }
+
+    public String getFMLVersion() {
+        return this.fmlVersion;
+    }
+    
+    private static String getFMLVersion(final String ip) {
+        return ip.contains("\0") ? Objects.equals(ip.split("\0")[1], NeoForgeVersion.getSpec()) ? NeoForgeVersion.getSpec() : ip.split("\0")[1] : "NONE";
     }
 }
